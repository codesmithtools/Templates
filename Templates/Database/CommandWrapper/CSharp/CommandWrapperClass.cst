<%------------------------------------------------------------------------------------------
* Author: Eric J. Smith
* Description: This template will generate wrappers for a stored procedure in a database.
------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" Description="This template will generate wrappers for a stored procedure in a database." %>

<%-- Required Properties  --%>
<%@ Property Name="SourceCommand" Type="SchemaExplorer.CommandSchema" Category="Required" Description="Command that the wrapper class should wrap." IncludeFunctions="True" %>
<%@ Property Name="Accessibility" Type="AccessibilityEnum" Default="Public" Category="Required" Description="The accessibility of the generated classes." %>
<%@ Property Name="ResultSchema" Type="ResultSchemaEnum" Default="StronglyTyped" Category="Required" Description="Determines what type of result schema should be used for the wrapper class." %>
<%@ Property Name="TargetNamespace" Type="System.String" Category="Required" Description="Namespace that the generated classes should be a member of." %>

<%-- Optional Properties  --%>
<%@ Property Name="CommandClassName" Type="System.String" Optional="True" Category="Optional" Description="Used to override the name of the command wrapper class." %>
<%@ Property Name="ResultRowClassName" Type="System.String" Optional="True" Category="Optional" Description="Used to override the name of the result row class." %>
<%@ Property Name="CommandPrefix" Type="System.String" Default="usp_" Category="Optional" Description="If this prefix is found at the start of a command name, it will be stripped off." %>
<%@ Property Name="BatchMode" Type="System.Boolean" Default="False" Category="Optional" Description="If true, the template will not output using and namespace statements." %>

<%-- Register referenced assemblies.  --%>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>

<%-- Import commonly used namespaces. --%>
<%@ Import Namespace="SchemaExplorer" %>

<% if (!BatchMode) { %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;
<% if (this.ResultSchema == ResultSchemaEnum.StronglyTyped && this.ReturnsResultSet) { %>
using System.Collections.ObjectModel;
<% } %>

namespace <%= TargetNamespace %>
{
<% } %>
<% if (this.ResultSchema == ResultSchemaEnum.StronglyTyped && this.ReturnsResultSet) { %>
	#region <%= GetRowClassName() %>
	/// <summary>
	/// Stores result row level information from the <%= SourceCommand.Name %> stored procedure.
	/// </summary>
	[Serializable]
	<%= GetAccessModifier() %> class <%= GetRowClassName() %>
	{
		#region Member Variables
		<% foreach (CommandResultColumnSchema column in SourceCommand.CommandResults[0].Columns) { %>
		<%= GetMemberVariableDeclarationStatement(column) %>
		<% } %>
		#endregion
		
		#region Constructors
		public <%= GetRowClassName() %>()
		{
		}
		
		public <%= GetRowClassName() %>(SqlDataReader reader)
		{
			this.LoadFromReader(reader);
		}
		#endregion
		
		#region Helper Methods
		
        protected void LoadFromReader(SqlDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
			{
				<% for (int i = 0; i < SourceCommand.CommandResults[0].Columns.Count; i++) { %>
				<%= GetReaderAssignmentStatement(SourceCommand.CommandResults[0].Columns[i], i) %>
				<% } %>
			}
		}
        
        /// <summary>
        /// Returns the Bytes stored in a binary column.
        /// </summary>
        /// <param name="reader">The reader.</param>
        /// <param name="index">The column index.</param>
        /// <returns>Bytes Stored in a column.</returns>
        public static byte[] GetBytes(SqlDataReader reader, int index)
        {
            var buffer = new byte[1024];
            long fieldOffset = 0;
            
            using (var stream = new System.IO.MemoryStream())
            {
                long bytesRead;

                while ((bytesRead = reader.GetBytes(index, fieldOffset, buffer, 0, buffer.Length)) > 0)
                {
                    var actualRead = new byte[bytesRead];
                    Buffer.BlockCopy(buffer, 0, actualRead, 0, (int)bytesRead);
                    stream.Write(actualRead, 0, actualRead.Length);
                    fieldOffset += bytesRead;
                }

                return stream.ToArray();
            }
        }
		
        #endregion
		
		#region Public Properties
		<% for (int i = 0; i < SourceCommand.CommandResults[0].Columns.Count; i++) { %>
		public <%= GetNativeType(SourceCommand.CommandResults[0].Columns[i]) %> <%= GetPropertyName(SourceCommand.CommandResults[0].Columns[i]) %>
		{
			get {return <%= GetMemberVariableName(SourceCommand.CommandResults[0].Columns[i]) %>;}
			set {<%= GetMemberVariableName(SourceCommand.CommandResults[0].Columns[i]) %> = value;}
		}
		<% if (i < SourceCommand.CommandResults[0].Columns.Count - 1) Response.Write("\r\n"); %>		
		<% } %>
		#endregion
	}
	#endregion
<% } %>
	#region <%= SourceCommand.Name %> Wrapper
    /// <summary>
    /// This class is a wrapper for the <%= SourceCommand.Name %> stored procedure.
    /// </summary>
    <%= GetAccessModifier() %> class <%= GetClassName() %>
    {
		#region Member Variables
        
		protected string _connectionString = String.Empty;
        protected SqlConnection _connection;
        protected SqlTransaction _transaction;
		protected bool _ownsConnection = true;
		protected int _recordsAffected = -1;
		protected <%= GetReturnValueDataType() %> _returnValue;
		<% foreach (ParameterSchema parameter in SourceCommand.NonReturnValueParameters) { %>
		<%= GetMemberVariableDeclarationStatement(parameter) %>
		<% } %>
		
        #endregion
		
		#region Constructors
        
		public <%= GetClassName() %>()
		{
		}
		
		public <%= GetClassName() %>(string connectionString)
		{
			this.ConnectionString = connectionString;
		}
		
		public <%= GetClassName() %>(SqlConnection connection)
		{
			this.Connection = connection;
		}
		
		public <%= GetClassName() %>(SqlConnection connection, SqlTransaction transaction)
		{
			this.Connection = connection;
			this.Transaction = transaction;
		}
        
		#endregion
		
		#region Public Properties
		
        /// <summary>
		/// The connection string to use when executing the <%= SourceCommand.Name %> stored procedure.
		/// </summary>
		public string ConnectionString
		{
			get {return _connectionString;}
			set {_connectionString = value;}
		}
        
        /// <summary>
        /// The connection to use when executing the <%= SourceCommand.Name %> stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }
		
        /// <summary>
        /// The transaction to use when executing the <%= SourceCommand.Name %> stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }
		
		/// <summary>
		/// Gets the return value from the <%= SourceCommand.Name %> stored procedure.
		/// </summary>
		public <%= GetReturnValueDataType() %> ReturnValue
		{
			get {return _returnValue;}
		}
		
		/// <summary>
		/// Gets the number of rows changed, inserted, or deleted by execution of the <%= SourceCommand.Name %> stored procedure.
		/// </summary>
		public int RecordsAffected
		{
			get {return _recordsAffected;}
		}
		
		<% for (int i = 0; i < SourceCommand.NonReturnValueParameters.Count; i++) { %>
		/// <summary>
		/// <%= SourceCommand.NonReturnValueParameters[i].Description %>
		/// </summary>
		public <%= GetNativeType(SourceCommand.NonReturnValueParameters[i]) %> <%= GetPropertyName(SourceCommand.NonReturnValueParameters[i]) %>
		{
			get {return <%= GetMemberVariableName(SourceCommand.NonReturnValueParameters[i]) %>;}
			set
			{
				<%= GetMemberVariableName(SourceCommand.NonReturnValueParameters[i]) %> = value;
			}
		}
		<% if (i < SourceCommand.NonReturnValueParameters.Count - 1) Response.Write("\r\n"); %>		
		<% } %>
        
		#endregion
		
		#region Helper Methods
        
        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
				_ownsConnection = false;
                return this.Connection;
            }
            
            System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
            return new SqlConnection(this.ConnectionString);
        }
        
		#endregion
		
		#region Execute Methods
        
		<% if (this.ReturnsResultSet) { %>
		/// <summary>
		/// This method calls the <%= SourceCommand.Name %> stored procedure and returns a SqlDataReader with the results.
		/// </summary>
		/// <returns>SqlDataReader</returns>
		public virtual SqlDataReader <%= this.ReturnsResultSet && this.ResultSchema == ResultSchemaEnum.ADO ? "Execute" : "ExecuteReader" %>()
		{
			SqlDataReader reader = null;
			SqlCommand cmd = new SqlCommand();
			SqlConnection cn = this.GetConnection();
			
			try
			{
				cmd.Connection = cn;
				cmd.Transaction = this.Transaction;
<% if(!IsTableValuedFunction) { %>
				cmd.CommandText = "[<%= SourceCommand.Owner %>].[<%= SourceCommand.Name %>]";
				cmd.CommandType = CommandType.StoredProcedure;
<% } else {%>
                cmd.CommandText = "SELECT * FROM [<%= SourceCommand.Owner %>].[<%= SourceCommand.Name %>](<%=BuildArgumentList()%>)";
				cmd.CommandType = CommandType.Text;
<%}%>

				#region Populate Parameters
                
				SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
				prmReturnValue.Direction = ParameterDirection.ReturnValue;
				
				<% for (int i = 0; i < SourceCommand.NonReturnValueParameters.Count; i++) { %>
				SqlParameter <%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %> = cmd.Parameters.Add("<%= SourceCommand.NonReturnValueParameters[i].Name %>", SqlDbType.<%= GetSqlDbType(SourceCommand.NonReturnValueParameters[i].NativeType) %>);
				<% if (SourceCommand.NonReturnValueParameters[i].Direction != ParameterDirection.Input) { %>
				if (<%= GetMemberVariableName(SourceCommand.NonReturnValueParameters[i]) %><%= BuildNullCheckStatement(SourceCommand.NonReturnValueParameters[i]) %>)
				{
				<%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Direction = ParameterDirection.<%= SourceCommand.NonReturnValueParameters[i].Direction.ToString() %>;
				}
				else
				{
					<%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Direction = ParameterDirection.Output;
				}
				<% } else { %>
				<%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Direction = ParameterDirection.<%= SourceCommand.NonReturnValueParameters[i].Direction.ToString() %>;
				<% } %>
				<% BuildParameterExtraStatements(SourceCommand.NonReturnValueParameters[i]); %>
				if (<%= BuildNullCheckStatement(SourceCommand.NonReturnValueParameters[i]) %>)
				    <%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Value = <%= GetPropertyName(SourceCommand.NonReturnValueParameters[i]) %><%=BuildNullValueStatement(SourceCommand.NonReturnValueParameters[i])%>;
				else
                    <%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Value = DBNull.Value;
                
				<% if (i < SourceCommand.NonReturnValueParameters.Count - 1) Response.Write("\t\t\t\t\r\n"); %>
				<% } %>
				#endregion
				
				#region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();
				if (_ownsConnection)
				{
					reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
				}
				else
				{
					reader = cmd.ExecuteReader();
				}
				#endregion
				
				#region Get Output Parameters
				if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
				{
					_returnValue = (<%= GetReturnValueDataType() %>)prmReturnValue.Value;
				}
				
				<% for (int i = 0; i < SourceCommand.AllOutputParameters.Count; i++) { %>
				if (<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %> != null && <%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value != null)
				{
					if (<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value is <%= GetNativeType(SourceCommand.AllOutputParameters[i]) %>)
					{
						this.<%= GetPropertyName(SourceCommand.AllOutputParameters[i]) %> = (<%= GetNativeType(SourceCommand.AllOutputParameters[i]) %>)<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value;
					}
					else
					{
						if (<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value != DBNull.Value)
						{
							this.<%= GetPropertyName(SourceCommand.AllOutputParameters[i]) %> = new <%= GetNativeType(SourceCommand.AllOutputParameters[i]) %>((<%= GetCSharpVariableType(SourceCommand.AllOutputParameters[i].DataType) %>)<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value);
						}
						else
						{
							this.<%= GetPropertyName(SourceCommand.AllOutputParameters[i]) %> = null;
						}
					}
				}
				else
				{
					this.<%= GetPropertyName(SourceCommand.AllOutputParameters[i]) %> = null;
				}
				<% if (i < SourceCommand.AllOutputParameters.Count - 1) Response.Write("\t\t\t\t\r\n"); %>
				<% } %>
				#endregion
			}
			finally
			{
				cmd.Dispose();
			}
			
			return reader;
		}
		
		/// <summary>
		/// This method calls the <%= SourceCommand.Name %> stored procedure and returns a DataSet with the results.
		/// </summary>
		/// <returns>DataSet</returns>
		public virtual DataSet ExecuteDataSet()
		{
			DataSet ds = new DataSet();
			SqlCommand cmd = new SqlCommand();
			
			SqlConnection cn = this.GetConnection();
			
			try
			{
				cmd.Connection = cn;
				cmd.Transaction = this.Transaction;
<% if(!IsTableValuedFunction) { %>
				cmd.CommandText = "[<%= SourceCommand.Owner %>].[<%= SourceCommand.Name %>]";
				cmd.CommandType = CommandType.StoredProcedure;
<% } else {%>
                cmd.CommandText = "SELECT * FROM [<%= SourceCommand.Owner %>].[<%= SourceCommand.Name %>](<%=BuildArgumentList()%>)";
				cmd.CommandType = CommandType.Text;
<%}%>
				
				#region Populate Parameters
				SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
				prmReturnValue.Direction = ParameterDirection.ReturnValue;
				
				<% for (int i = 0; i < SourceCommand.NonReturnValueParameters.Count; i++) { %>
				SqlParameter <%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %> = cmd.Parameters.Add("<%= SourceCommand.NonReturnValueParameters[i].Name %>", SqlDbType.<%= GetSqlDbType(SourceCommand.NonReturnValueParameters[i].NativeType) %>);
				<% if (SourceCommand.NonReturnValueParameters[i].Direction != ParameterDirection.Input) { %>
				if (<%= GetMemberVariableName(SourceCommand.NonReturnValueParameters[i]) %><%= BuildNullCheckStatement(SourceCommand.NonReturnValueParameters[i]) %>)
				{
				<%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Direction = ParameterDirection.<%= SourceCommand.NonReturnValueParameters[i].Direction.ToString() %>;
				}
				else
				{
					<%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Direction = ParameterDirection.Output;
				}
				<% } else { %>
				<%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Direction = ParameterDirection.<%= SourceCommand.NonReturnValueParameters[i].Direction.ToString() %>;
				<% } %>
				<% BuildParameterExtraStatements(SourceCommand.NonReturnValueParameters[i]); %>
				if (<%= BuildNullCheckStatement(SourceCommand.NonReturnValueParameters[i]) %>)
				    <%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Value = <%= GetPropertyName(SourceCommand.NonReturnValueParameters[i]) %><%=BuildNullValueStatement(SourceCommand.NonReturnValueParameters[i])%>;
				else
                    <%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Value = DBNull.Value;
                
				<% if (i < SourceCommand.NonReturnValueParameters.Count - 1) Response.Write("\t\t\t\t\r\n"); %>
				<% } %>
				#endregion
				
				#region Execute Command
				if (cn.State != ConnectionState.Open) cn.Open();
				
				SqlDataAdapter da = new SqlDataAdapter(cmd);
				da.Fill(ds);
				_recordsAffected = ds.Tables[0].Rows.Count;
				#endregion
				
				#region Get Output Parameters
				if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
				{
					_returnValue = (<%= GetReturnValueDataType() %>)prmReturnValue.Value;
				}
				
				<% for (int i = 0; i < SourceCommand.AllOutputParameters.Count; i++) { %>
				if (<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %> != null && <%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value != null)
				{
					if (<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value is <%= GetNativeType(SourceCommand.AllOutputParameters[i]) %>)
					{
						this.<%= GetPropertyName(SourceCommand.AllOutputParameters[i]) %> = (<%= GetNativeType(SourceCommand.AllOutputParameters[i]) %>)<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value;
					}
					else
					{
						if (<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value != DBNull.Value)
						{
							this.<%= GetPropertyName(SourceCommand.AllOutputParameters[i]) %> = new <%= GetNativeType(SourceCommand.AllOutputParameters[i]) %>((<%= GetCSharpVariableType(SourceCommand.AllOutputParameters[i].DataType) %>)<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value);
						}
						else
						{
							this.<%= GetPropertyName(SourceCommand.AllOutputParameters[i]) %> = null;
						}
					}
				}
				else
				{
					this.<%= GetPropertyName(SourceCommand.AllOutputParameters[i]) %> = null;
				}
				<% if (i < SourceCommand.AllOutputParameters.Count - 1) Response.Write("\t\t\t\t\r\n"); %>
				<% } %>
				#endregion
			}
			finally
			{
				if (_ownsConnection)
				{
					if (cn.State == ConnectionState.Open)
					{
						cn.Close();
					}
					
					cn.Dispose();
				}
				cmd.Dispose();
			}
			
			return ds;
		}
		
		<% } %>
		<% if (this.ReturnsResultSet == false || this.ResultSchema == ResultSchemaEnum.StronglyTyped) { %>
		/// <summary>
		/// This method calls the <%= SourceCommand.Name %> stored procedure<% if (this.ReturnsResultSet) { %> and outputs the results to a custom strongly typed collection<% } %>.
		/// </summary>
		<% if (this.ReturnsResultSet) { %>
		/// <returns><%= GetRowClassCollectionName() %></returns>
		<% } %>
		public virtual <% if (this.ReturnsResultSet) Response.Write(GetRowClassCollectionName()); else Response.Write("void"); %> Execute()
		{
			<% if (this.ReturnsResultSet) { %>
			<%= GetRowClassCollectionName() %> <%= GetRowClassCollectionInstanceName() %> = new <%= GetRowClassCollectionName() %>();
			<% } %>
			SqlCommand cmd = new SqlCommand();
			
			SqlConnection cn = this.GetConnection();
			
			try
			{
				cmd.Connection = cn;
				cmd.Transaction = this.Transaction;
<% if(!IsTableValuedFunction) { %>
				cmd.CommandText = "[<%= SourceCommand.Owner %>].[<%= SourceCommand.Name %>]";
				cmd.CommandType = CommandType.StoredProcedure;
<% } else {%>
                cmd.CommandText = "SELECT * FROM [<%= SourceCommand.Owner %>].[<%= SourceCommand.Name %>](<%=BuildArgumentList()%>)";
				cmd.CommandType = CommandType.Text;
<%}%>
				
				#region Populate Parameters
				SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
				prmReturnValue.Direction = ParameterDirection.ReturnValue;
				
				<% for (int i = 0; i < SourceCommand.NonReturnValueParameters.Count; i++) { %>
				SqlParameter <%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %> = cmd.Parameters.Add("<%= SourceCommand.NonReturnValueParameters[i].Name %>", SqlDbType.<%= GetSqlDbType(SourceCommand.NonReturnValueParameters[i].NativeType) %>);
				<% if (SourceCommand.NonReturnValueParameters[i].Direction != ParameterDirection.Input) { %>
				if (<%= BuildNullCheckStatement(SourceCommand.NonReturnValueParameters[i]) %>)
				{
				<%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Direction = ParameterDirection.<%= SourceCommand.NonReturnValueParameters[i].Direction.ToString() %>;
				}
				else
				{
					<%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Direction = ParameterDirection.Output;
				}
				<% } else { %>
				<%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Direction = ParameterDirection.<%= SourceCommand.NonReturnValueParameters[i].Direction.ToString() %>;
				<% } %>
				<% BuildParameterExtraStatements(SourceCommand.NonReturnValueParameters[i]); %>
				if (<%= BuildNullCheckStatement(SourceCommand.NonReturnValueParameters[i]) %>)
                    <%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Value = <%= GetPropertyName(SourceCommand.NonReturnValueParameters[i]) %><%=BuildNullValueStatement(SourceCommand.NonReturnValueParameters[i])%>;
				else
                    <%= GetParameterName(SourceCommand.NonReturnValueParameters[i].Name) %>.Value = DBNull.Value;
                
				<% if (i < SourceCommand.NonReturnValueParameters.Count - 1) Response.Write("\t\t\t\t\r\n"); %>
				<% } %>
				#endregion
				
				#region Execute Command
				<% if (this.ReturnsResultSet) { %>
				if (cn.State != ConnectionState.Open) cn.Open();
				SqlDataReader reader = cmd.ExecuteReader();
				try
				{
					while (reader.Read())
					{
						<%= GetRowClassName() %> <%= GetCamelCaseName(GetRowClassName()) %> = new <%= GetRowClassName() %>(reader);
						<%= GetRowClassCollectionInstanceName() %>.Add(<%= GetCamelCaseName(GetRowClassName()) %>);
					}
				}
				finally
				{
					if (!reader.IsClosed)
					{
						reader.Close();
						_recordsAffected = reader.RecordsAffected;
					}
				}
				<% } else { %>
				if (cn.State != ConnectionState.Open) cn.Open();
				_recordsAffected = cmd.ExecuteNonQuery();
				<% } %>
				#endregion
				
				#region Get Output Parameters
				if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
				{
					_returnValue = (<%= GetReturnValueDataType() %>)prmReturnValue.Value;
				}
				
				<% for (int i = 0; i < SourceCommand.AllOutputParameters.Count; i++) { %>
				if (<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %> != null && <%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value != null)
				{
					if (<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value is <%= GetNativeType(SourceCommand.AllOutputParameters[i]) %>)
					{
						this.<%= GetPropertyName(SourceCommand.AllOutputParameters[i]) %> = (<%= GetNativeType(SourceCommand.AllOutputParameters[i]) %>)<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value;
					}
					else
					{
						if (<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value != DBNull.Value)
						{
							this.<%= GetPropertyName(SourceCommand.AllOutputParameters[i]) %> = new <%= GetNativeType(SourceCommand.AllOutputParameters[i]) %>((<%= GetCSharpVariableType(SourceCommand.AllOutputParameters[i].DataType) %>)<%= GetParameterName(SourceCommand.AllOutputParameters[i].Name) %>.Value);
						}
						else
						{
							this.<%= GetPropertyName(SourceCommand.AllOutputParameters[i]) %> = null;
						}
					}
				}
				else
				{
					this.<%= GetPropertyName(SourceCommand.AllOutputParameters[i]) %> = null;
				}
				<% if (i < SourceCommand.AllOutputParameters.Count - 1) Response.Write("\t\t\t\t\r\n"); %>
				<% } %>
				#endregion
			}
			finally
			{
				if (_ownsConnection)
				{
					if (cn.State == ConnectionState.Open)
					{
						cn.Close();
					}
					
					cn.Dispose();
				}
				cmd.Dispose();
			}
			<% if (this.ReturnsResultSet) { %>
			
			return <%= GetRowClassCollectionInstanceName() %>;
			<% } %>
		}
		<% } %>
		
		<% if (SourceCommand.Parameters.Count <= 42) { // IntelliSense breaks after 42 parameters on one method. %>
		<% if (this.ReturnsResultSet) { %>
		/// <summary>
		/// This method calls the <%= SourceCommand.Name %> stored procedure and returns a SqlDataReader with the results.
		/// </summary>
		<% BuildXmlCommentParameterList(); %>
		/// <returns>SqlDataReader</returns>
		public static SqlDataReader <%= this.ReturnsResultSet && this.ResultSchema == ResultSchemaEnum.ADO ? "Execute" : "ExecuteReader" %>(
				#region Parameters
				<%= BuildParameterList() %>
				#endregion
		    )
		{
			<%= GetClassName() %> <%= GetCamelCaseName(GetClassName()) %> = new <%= GetClassName() %>();
			
			#region Assign Property Values
			<%= GetCamelCaseName(GetClassName()) %>.ConnectionString = connectionString;
			<%= AssignPropertyValues(GetCamelCaseName(GetClassName())) %>
			#endregion
			
			SqlDataReader reader = <%= GetCamelCaseName(GetClassName()) %>.<%= this.ReturnsResultSet && this.ResultSchema == ResultSchemaEnum.ADO ? "Execute" : "ExecuteReader" %>();
			
			#region Get Property Values
			<%= GetPropertyValues(GetCamelCaseName(GetClassName())) %>
			#endregion
			
			return reader;
		}
		
		/// <summary>
		/// This method calls the <%= SourceCommand.Name %> stored procedure and returns a DataSet with the results.
		/// </summary>
		<% BuildXmlCommentParameterList(); %>
		/// <returns>DataSet</returns>
		public static DataSet ExecuteDataSet(
				#region Parameters
				<%= BuildParameterList() %>
				#endregion
		    )
		{
			<%= GetClassName() %> <%= GetCamelCaseName(GetClassName()) %> = new <%= GetClassName() %>();
			
			#region Assign Property Values
			<%= GetCamelCaseName(GetClassName()) %>.ConnectionString = connectionString;
			<%= AssignPropertyValues(GetCamelCaseName(GetClassName())) %>
			#endregion
			
			DataSet ds = <%= GetCamelCaseName(GetClassName()) %>.ExecuteDataSet();
			
			#region Get Property Values
			<%= GetPropertyValues(GetCamelCaseName(GetClassName())) %>
			#endregion
			
			return ds;
		}
		
		<% } %>
		<% if (this.ReturnsResultSet == false || this.ResultSchema == ResultSchemaEnum.StronglyTyped) { %>
		/// <summary>
		/// This method calls the <%= SourceCommand.Name %> stored procedure<% if (this.ReturnsResultSet) { %> and outputs the results to a custom strongly typed collection<% } %>.
		/// </summary>
		<% BuildXmlCommentParameterList(); %>
		<% if (this.ReturnsResultSet) { %>
		/// <returns><%= GetRowClassCollectionName() %></returns>
		<% } %>
		public static <% if (this.ReturnsResultSet) Response.Write(GetRowClassCollectionName()); else Response.Write("void");; %> Execute(
				#region Parameters
				<%= BuildParameterList() %>
				#endregion
		    )
		{
			<%= GetClassName() %> <%= GetCamelCaseName(GetClassName()) %> = new <%= GetClassName() %>();
			
			#region Assign Property Values
			<%= GetCamelCaseName(GetClassName()) %>.ConnectionString = connectionString;
			<%= AssignPropertyValues(GetCamelCaseName(GetClassName())) %>
			#endregion
			
			<% if (this.ReturnsResultSet) { %>
			<%= GetRowClassCollectionName() %> <%= GetRowClassCollectionInstanceName() %> = <%= GetCamelCaseName(GetClassName()) %>.Execute();
			<% } else { %>
			<%= GetCamelCaseName(GetClassName()) %>.Execute();
			<% } %>
			
			#region Get Property Values
			<%= GetPropertyValues(GetCamelCaseName(GetClassName())) %>
			#endregion
			<% if (this.ReturnsResultSet) { %>
			
			return <%= GetRowClassCollectionInstanceName() %>;
			<% } %>
		}
		<% } %>
		<% } %>
		#endregion
	}
	#endregion
<% if (!BatchMode) { %>
}
<% } %>

<script runat="template">
#region Name Helpers
public string GetClassName()
{
	if(!string.IsNullOrEmpty(CommandClassName))
	{
		return CommandClassName;
	}
	else if(SourceCommand != null)
	{
		string className = SourceCommand.Name;
		if (className.StartsWith(this.CommandPrefix)) className = className.Substring(this.CommandPrefix.Length - 1);
		className = className.Replace(" ", "");
		className = className.Replace("_", "");
		return className;
	}
    
    return "WrapperClass";
}

public string GetRowClassName()
{
	if (ResultRowClassName != null && ResultRowClassName.Length > 0)
	{
		return ResultRowClassName;
	}
	else
	{
		return GetClassName() + "Row";
	}
}

public string GetRowClassCollectionName()
{
	return "Collection<" + GetRowClassName() + ">";
}

public string GetRowClassCollectionInstanceName()
{
	return GetCamelCaseName(GetRowClassName() + "List");
}

public new string GetCamelCaseName(string value)
{
	if (value.StartsWith("@")) value = value.Substring(1);
	if (value == "RETURN_VALUE") return "returnValue";
	
	return StringUtil.ToCamelCase(value);
}

public string GetParameterName(string value)
{
	value = value.Replace(" ", "");
	if (value.StartsWith("@")) value = value.Substring(1);
	return "prm" + value;
}

public string GetMemberVariableName(CommandResultColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	string memberVariableName = "_" + GetCamelCaseName(propertyName);
	
	return memberVariableName;
}

public string GetMemberVariableName(ParameterSchema parameter)
{
	string propertyName = GetPropertyName(parameter);
	if (propertyName.StartsWith("@")) propertyName = propertyName.Substring(1);
	string memberVariableName = "_" + GetCamelCaseName(propertyName);
	
	return memberVariableName;
}

public string GetPropertyName(CommandResultColumnSchema column)
{
	string propertyName = column.Name.Replace(" ", "");
	return propertyName;
}

public string GetPropertyName(ParameterSchema parameter)
{
	string propertyName = parameter.Name.Replace(" ", "");
	if (propertyName.StartsWith("@")) propertyName = propertyName.Substring(1);
	
	return propertyName;
}
#endregion

#region Miscellaneous

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}

private bool ReturnsResultSet
{
	get
	{
		try
		{
			return this.ResultSchema != ResultSchemaEnum.None && (SourceCommand.CommandResults.Count > 0);
		}
		catch
		{
			// problem discovering schema information, change result schema to ADO.
			this.ResultSchema = ResultSchemaEnum.ADO;
			return true;
		}
	}
}

public void BuildXmlCommentParameterList()
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	builder.Append("\t\t/// <param name=\"connectionString\">The connection string to use</param>\r\n");
	for (int i = 0; i < SourceCommand.InputParameters.Count; i++)
	{
		builder.Append("\t\t/// ");
		builder.Append("<param name=\"");
		builder.Append(GetCamelCaseName(SourceCommand.InputParameters[i].Name));
		builder.Append("\">");
		builder.Append(SourceCommand.InputParameters[i].Description);
		builder.Append("</param>\r\n");
	}
	for (int i = 0; i < SourceCommand.InputOutputParameters.Count; i++)
	{
		builder.Append("\t\t/// ");
		builder.Append("<param name=\"");
		builder.Append(GetCamelCaseName(SourceCommand.InputOutputParameters[i].Name));
		builder.Append("\">");
		builder.Append(SourceCommand.InputOutputParameters[i].Description);
		builder.Append("</param>\r\n");
	}
	for (int i = 0; i < SourceCommand.OutputParameters.Count; i++)
	{
		builder.Append("\t\t/// ");
		builder.Append("<param name=\"");
		builder.Append(GetCamelCaseName(SourceCommand.OutputParameters[i].Name));
		builder.Append("\">");
		builder.Append(SourceCommand.OutputParameters[i].Description);
		builder.Append("</param>\r\n");
	}
	
	if (builder.ToString().Length > 0)
	{
		Response.Write(builder.ToString());
	}
}

public void BuildParameterExtraStatements(ParameterSchema parameter)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	switch (parameter.DataType)
	{
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			builder.Append("\t\t\t\t\t");
			builder.Append(GetParameterName(parameter.Name));
			builder.Append(".Size = ");
			builder.Append(parameter.Size);
			builder.Append(";\r\n");
			break;
		}
		case DbType.Currency:
		case DbType.Decimal:
		case DbType.Double:
		case DbType.VarNumeric:
		{
			builder.Append("\t\t\t\t\t");
			builder.Append(GetParameterName(parameter.Name));
			builder.Append(".Precision = ");
			builder.Append(parameter.Precision);
			builder.Append(";\r\n");
			builder.Append("\t\t\t\t\t");
			builder.Append(GetParameterName(parameter.Name));
			builder.Append(".Scale = ");
			builder.Append(parameter.Scale);
			builder.Append(";\r\n");
			break;
		}
	}
	
	if (builder.ToString().Length > 0)
	{
		Response.Write(builder.ToString());
	}
}

public string BuildParameterList()
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	builder.Append("string connectionString,\r\n\t\t\t\t");
	for (int i = 0; i < SourceCommand.InputParameters.Count; i++)
	{
		builder.Append(GetNativeType(SourceCommand.InputParameters[i]));
		builder.Append(" ");
		builder.Append(GetCamelCaseName(SourceCommand.InputParameters[i].Name));
		builder.Append(",\r\n\t\t\t\t");
	}
	for (int i = 0; i < SourceCommand.InputOutputParameters.Count; i++)
	{
		builder.Append("ref ");
		builder.Append(GetNativeType(SourceCommand.InputOutputParameters[i]));
		builder.Append(" ");
		builder.Append(GetCamelCaseName(SourceCommand.InputOutputParameters[i].Name));
		builder.Append(",\r\n\t\t\t\t");
	}
	for (int i = 0; i < SourceCommand.OutputParameters.Count; i++)
	{
		builder.Append("ref ");
		builder.Append(GetNativeType(SourceCommand.OutputParameters[i]));
		builder.Append(" ");
		builder.Append(GetCamelCaseName(SourceCommand.OutputParameters[i].Name));
		builder.Append(",\r\n\t\t\t\t");
	}
	
	if (builder.ToString().Length > 0)
	{
		return builder.ToString().Substring(0, builder.Length - 7);
	}
	else
	{
		return "";
	}
}

public string BuildArgumentList()
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	for (int i = 0; i < SourceCommand.NonReturnValueParameters.Count; i++)
	{
        builder.Append(SourceCommand.NonReturnValueParameters[i].Name);
		builder.Append(", ");
	}
	
	if (builder.ToString().Length > 0)
	{
		return builder.ToString().Substring(0, builder.Length - 2);
	}
	else
	{
		return "";
	}
}

public string BuildNullCheckStatement(ParameterSchema parameter)
{
    if (GetNativeType(parameter).EndsWith("[]"))
	    return string.Format("{0} != null", GetPropertyName(parameter));

    if(GetNativeType(parameter).Equals("string", StringComparison.InvariantCultureIgnoreCase))
        return string.Format("!string.IsNullOrEmpty({0})", GetPropertyName(parameter));
        
    return string.Format("{0}.HasValue", GetPropertyName(parameter));
}

// If the value type is a string then don't include the .Value.
public string BuildNullValueStatement(ParameterSchema parameter)
{
    if(GetNativeType(parameter).Equals("string", StringComparison.InvariantCultureIgnoreCase) || GetNativeType(parameter).EndsWith("[]"))
        return string.Empty;
        
    return ".Value";
}

public string AssignPropertyValues(string objectName)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	for (int i = 0; i < SourceCommand.NonReturnValueParameters.Count; i++)
	{
		builder.Append(objectName);
		builder.Append(".");
		builder.Append(GetPropertyName(SourceCommand.NonReturnValueParameters[i]));
		builder.Append(" = ");
		builder.Append(GetCamelCaseName(SourceCommand.NonReturnValueParameters[i].Name));
		builder.Append(";\r\n\t\t\t");
	}
	
	if (builder.ToString().Length > 0)
	{
		return builder.ToString().Substring(0, builder.Length - 5);
	}
	else
	{
		return "";
	}
}

public string GetPropertyValues(string objectName)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	for (int i = 0; i < SourceCommand.AllOutputParameters.Count; i++)
	{
		builder.Append(GetCamelCaseName(SourceCommand.AllOutputParameters[i].Name));
		builder.Append(" = ");
		builder.Append(objectName);
		builder.Append(".");
		builder.Append(GetPropertyName(SourceCommand.AllOutputParameters[i]));
		builder.Append(";\r\n\t\t\t");
	}
	
	if (builder.ToString().Length > 0)
	{
		return builder.ToString().Substring(0, builder.Length - 5);
	}
	else
	{
		return "";
	}
}

public string GetReturnValueDataType()
{
    if(SourceCommand.Parameters.Contains("@RETURN_VALUE") && SourceCommand.Parameters["@RETURN_VALUE"] != null)
    {
        return SourceCommand.Parameters["@RETURN_VALUE"].SystemType.ToString();
    }
    
    return "int";
}

#endregion

#region Declaration Statements

public string GetMemberVariableDeclarationStatement(CommandResultColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("protected", column);
}

public string GetMemberVariableDeclarationStatement(string protectionLevel, CommandResultColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += GetNativeType(column) + " " + GetMemberVariableName(column);
	
	string defaultValue = null;
	if (!string.IsNullOrEmpty(defaultValue))
	{
		statement += " = " + defaultValue;
	}
	
	statement += ";";
	
	return statement;
}

public string GetMemberVariableDeclarationStatement(ParameterSchema parameter)
{
	return GetMemberVariableDeclarationStatement("protected", parameter);
}

public string GetMemberVariableDeclarationStatement(string protectionLevel, ParameterSchema parameter)
{
	string statement = protectionLevel + " ";
	statement += GetNativeType(parameter) + " " + GetMemberVariableName(parameter);
	
	string defaultValue = null;
	if (!string.IsNullOrEmpty(defaultValue))
	{
		statement += " = " + defaultValue;
	}
	
	statement += ";";
	
	return statement;
}

public string GetReaderAssignmentStatement(CommandResultColumnSchema column, int index)
{
	string statement = "if (!reader.IsDBNull(" + index.ToString() + ")) ";
	statement += GetMemberVariableName(column) + " = ";
	
	if (column.Name.EndsWith("TypeCode")) statement += "(" + column.Name + ")";
	
    string readerStatement = GetReaderMethod(column.DataType);
    if ((readerStatement.Equals("GetBytes", StringComparison.InvariantCultureIgnoreCase))) {
        statement += "GetBytes(reader, " + index.ToString() + ");";
    } else {
        statement += "reader." + readerStatement + "(" + index.ToString() + ");";
    }
	
	return statement;
}
#endregion

#region Lookups

[Browsable(false)]
public bool IsTableValuedFunction
{
    get
    {
        if (SourceCommand == null || !SourceCommand.ExtendedProperties.Contains("CS_IsTableValuedFunction"))
            return false;

        bool temp;
        bool.TryParse(SourceCommand.ExtendedProperties["CS_IsTableValuedFunction"].Value.ToString(), out temp);

        return temp;
    }
}

public string GetNativeType(ParameterSchema parameter)
{
    string result = this.GetCSharpVariableType(parameter);
    if(result.Equals("string", StringComparison.InvariantCultureIgnoreCase) || result.EndsWith("[]"))
        return result;
    
    return string.Format("{0}?", result);
}

public string GetNativeType(CommandResultColumnSchema column)
{
    string result = this.GetCSharpVariableType(column);
    if(result.Equals("string", StringComparison.InvariantCultureIgnoreCase) || result.EndsWith("[]"))
        return result;
    
    return string.Format("{0}?", result);
}

public string GetAccessModifier()
{
    switch (Accessibility)
	{
        case AccessibilityEnum.Public: return "public";
        case AccessibilityEnum.Protected: return "protected";
        case AccessibilityEnum.Internal: return "internal";
        case AccessibilityEnum.ProtectedInternal: return "protected internal";
        case AccessibilityEnum.Private: return "private";
        default: return "public";
    }
}

public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public enum ResultSchemaEnum
{
    StronglyTyped,
    ADO,
    None
}

#endregion

</script>
