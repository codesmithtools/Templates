<%------------------------------------------------------------------------------------------
* Author: Eric J. Smith 
* Description: This template will generate standard CRUD stored procedures for all tables
*   with primary keys in a given database.
------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Language="C#" LinePragmas="True" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" CompilerVersion="v3.5" TargetLanguage="T-SQL" Description="Generates SELECT/INSERT/UPDATE/DELETE stored procedure based on a database schema." %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="1. Context" Description="Database that the stored procedures should be based on." %>
<%-- This property must be added manually because it is defined as a nested type in the StoredProcedures template --%>
<%@ Property Name="IsolationLevel" Type="StoredProceduresTemplate.TransactionIsolationLevelEnum" Default="ReadCommitted" Category="2. Options" Description="Isolation level to use in the generated procedures." %>
<%@ Property Name="ExcludedTables" Type="StringCollection" Default="" Optional="True" Category="2. Options"
	Description="If supplied, any matching tables will not get stored procedures generated. (* is treated as a wildcard)" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%-- Register the StoredProcedures template and have it's properties merged into this template.  --%>
<%@ Register Template="StoredProcedures.cst" Name="StoredProceduresTemplate" MergeProperties="True" ExcludeProperties="SourceTable,IsolationLevel,OutputFile" %>
<%
this.Progress.MaximumValue = SourceDatabase.Tables.Count + 1;
this.Progress.Step = 1;

foreach(TableSchema table in SourceDatabase.Tables.Where(t => !t.HasPrimaryKey))
{
    Response.WriteLine("-- Skipping " + table.Name + " because it does not have a primary key");
}
this.Progress.PerformStep();

foreach(TableSchema table in SourceDatabase.Tables.Where(t => t.HasPrimaryKey && !TableIsExcluded(t)))
{
    OutputStoredProcedures(table);
	this.Progress.PerformStep();
}
%>
<script runat="template">
// Demonstrates executing a template within a template and directing it's output to the current template.
public void OutputStoredProcedures(TableSchema table)
{
	StoredProceduresTemplate storedProceduresTemplate = new StoredProceduresTemplate();
	storedProceduresTemplate.SourceTable = table;
	this.CopyPropertiesTo(storedProceduresTemplate);
	// we don't want this property to be set.
	storedProceduresTemplate.OutputFile = String.Empty;
	
	storedProceduresTemplate.Render(Response);
}

// Assign an appropriate file name to the output.
public override string GetFileName()
{
	if (this.SourceDatabase != null)
	{
		return this.SourceDatabase.Name + "_Procedures.sql";
	}
	else
	{
		return base.GetFileName();
	}
}

private Regex excludedTableRegex = null;

public bool TableIsExcluded(TableSchema table)
{
	if (excludedTableRegex == null)
	{
		if (ExcludedTables != null && ExcludedTables.Count > 0)
		{
			string excluded = String.Empty;
			for (int i = 0; i < ExcludedTables.Count; i++)
			{
				if (ExcludedTables[i].Trim().Length > 0)
				{
					excluded += "(" + Regex.Escape(ExcludedTables[i]).Replace("\\*", ".*?") + ")|";
				}
			}
			
			if (excluded.Length > 0)
			{
				excluded = excluded.Substring(0, excluded.Length - 1);
				excludedTableRegex = new Regex(excluded, RegexOptions.IgnoreCase);
			}
		}
	}
	
	if (excludedTableRegex != null && excludedTableRegex.IsMatch(table.Name)) return true;
	
	return false;
}

// Override the OutputFile property and assign our specific settings to it.
[Category("2. Options")]
[FileDialog(FileDialogType.Save, Title="Select Output File", Filter="Query Files (*.sql)|*.sql|All Files (*.*)|*.*", DefaultExtension=".sql")]
public override string OutputFile
{
	get {return base.OutputFile;}
	set {base.OutputFile = value;}
}
</script>