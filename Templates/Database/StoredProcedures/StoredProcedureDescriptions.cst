<%--
 Author: Oskar Austegard (POA) - oskara@mominc.com, http://austegard.blogspot.com
   Mind Over Machines, Inc. - http://www.mominc.com
 Comment: This template was inspired by Jason Alexander's DBDocumenter templates 
   (http://www.ngallery.org/dbdocumenter/), and provide a simple way to add Description 
   extended properties for stored procedures and their parameters, by parsing inline SQL 
   comments. 
 Note: Tested in CodeSmith 3.0 Beta 3, will not work with earlier versions.
 Example: 
 	-- Any comment, multilined or single lined, using -- or C style comments, 
 	-- prior to the procedure, will be picked up as the procedure Description
    -- Single-quotes are properly escaped in the output
  	CREATE PROC FooBar
  		@Foo int, --This will become the description for the @Foo parameter
  		@Bar varchar(50) -- And this'll become the description for @Bar
  	AS
  	UPDATE FooBar
  	SET Bar = @Bar --An inline comment here will be ignored
  	WHERE Foo = @Foo

 Modified: 
  Jan 08 '04 by Oskar Austegard
   - Initial version
  Jan 09 '04 by Eric J. Smith
   - Changed it so that the template does not assume that each parameter will have a comment.
   - Changed the "CREATE[\s]*PROC" regex to "CREATE[\s]+PROC" since there must be a space between 
     CREATE and PROC.
   - Made changes to the GetSqlParameterComments method to only pull comments from within the 
     proc definition instead of the entire proc's code.
  Jan 09 '04 by Oskar Austegard
   - Added Eric's changes to this change log
   - Minor code cleanup
  Mar 15 '04 by Oskar Austegard
   - Fixed bug in parameter regular expression that stopped looking for parameter comments when it 
     encountered the snippet 'as' even in a comment. Also refactored the RegEx strings themselves 
     to be more readable
  Aug 11 '04 by Oskar Austegard
   - Fixed bug that failed to escape single-quotes (') in comment strings.
   - Fixed bug that failed to create drop statements for Descriptions containing only empty strings: 
     Replaced check for !Description.Equals(String.Empty) with ExtendedProperties["MS_Description"] != null
  Apr 11 '05 by Oskar Austegard
   - Updated to compile against CS 3.0b3 (not backwards compatible)
   - Added option to execute generated SQL directly in the database
--%>
<%@ CodeTemplate Language="C#" Debug="False" TargetLanguage="T-SQL" Description="Generates SQL to extract inline comments from stored procedures and add them as Description extended properties." %>
<%@ Property Name="StoredProcedures" Type="SchemaExplorer.CommandSchemaCollection" Category="Database" Description="Stored procedure(s) from which to extract descriptions" %>
<%@ Property Name="ExecuteResults" Type="System.Boolean" Default="True" Optional="False" Category="Options" 
	Description="Should the resulting SQL be executed in the db upon running the template?" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

USE <%=  StoredProcedures[0].Database.Name%>
GO
SET NOCOUNT ON
<% 
string procComment;
Hashtable inlineComments = new Hashtable();
foreach (CommandSchema storedProc in StoredProcedures)
{
%> 

-- Refresh the procedure comment for <%= storedProc.Name %>
<%
	//First remove any existing description for the procedure
	DropProcedureDescription(storedProc);
	//then get the inline SQL comment by parsing the command text
	procComment = GetSqlProcedureComment(storedProc.CommandText);
	//Then add the description for the procedure
	AddProcedureDescription(storedProc, procComment);
%>
--Refresh the parameter comments
<%	
	//Next, get the procedure parameter comments by parsing the inline comments
	inlineComments = GetSqlParameterComments(storedProc.CommandText);
	//Loop over all the parameters (except the return value parameter), and
	foreach (ParameterSchema param in storedProc.NonReturnValueParameters)
	{
		//first remove any existing description
		DropParameterDescription(param);
		//then add a description for the parameter
		if (inlineComments[param.Name] != null)
		{
			AddParameterDescription(param, inlineComments[param.Name].ToString());
		}
	}
	//clean up
	procComment = string.Empty;
	inlineComments.Clear();
}//end foreach procedure
%>

<script runat="template">
#region BaseTemplate Overrides
///<summary>Override the OnPostRender event handler to execute the generated SQL in the database.</summary>
///<param name="result">The generated result of the template.</param>
protected override void OnPostRender(string result) 
{
	if (this.ExecuteResults)
	{
		// execute the output on the same database as the source table.
		Trace.WriteLine(String.Format("Executing SQL script in {0}...", this.StoredProcedures[0].Database));
		ScriptResult scriptResult = 
			ScriptUtility.ExecuteScript(this.StoredProcedures[0].Database.ConnectionString, result, 
			new System.Data.SqlClient.SqlInfoMessageEventHandler(OnSqlInfoMessage)); 
		Trace.WriteLine(scriptResult.ToString());
	}
	base.OnPostRender(result);
}
///<summary>SqlInfoMessage event handler.</summary>
///<param name="sender">(insignificant - ignored)</param>
///<param name="e">SqlInfoMessage Event Arguments. Contains errors, source and message</param>
private void OnSqlInfoMessage(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs e)
{
	Trace.WriteLine(e.Message);
}
#endregion (BaseTemplate Overrides)

//Output the SQL to drop a procedure description 
private void DropProcedureDescription(CommandSchema storedProc)
{
	if (storedProc.ExtendedProperties["MS_Description"] != null)
		Response.Write(string.Format("EXEC sp_dropextendedproperty 'MS_Description', 'user', 'dbo', 'PROCEDURE', '{0}'\r\n", storedProc.Name));
}

//Output the SQL to add the description for a procedure
private void AddProcedureDescription(CommandSchema storedProc, string procDesc)
{
	Response.Write(string.Format("EXEC sp_addextendedproperty 'MS_Description', '{0}', 'user', 'dbo', 'PROCEDURE', '{1}'\r\n", procDesc, storedProc.Name));
}

//Output the SQL to drop a parameter description
private void DropParameterDescription(ParameterSchema param)
{
	if (param.ExtendedProperties["MS_Description"] != null)
		Response.Write(string.Format("EXEC sp_dropextendedproperty 'MS_Description', 'user', 'dbo', 'PROCEDURE', '{0}', 'PARAMETER', '{1}'\r\n", param.Command.Name, param.Name));
}

//Output the SQL to add a description for a parameter
private void AddParameterDescription(ParameterSchema param, string paramDesc)
{
	Response.Write(string.Format("EXEC sp_addextendedproperty 'MS_Description', '{0}', 'user', 'dbo', 'PROCEDURE', '{1}', 'PARAMETER', '{2}'\r\n", paramDesc, param.Command.Name, param.Name));
}


/// <summary>
/// Parse the text of a stored procedure to retrieve any comment prior to the CREATE PROC construct
/// </summary>
/// <param name="commandText">Command Text of the procedure</param>
/// <returns>The procedure header comment</returns>
private string GetSqlProcedureComment(string commandText)
{
	string comment = "";
	// Find anything upto the CREATE PROC statement
	Regex regex = new Regex(@"CREATE[\s]+PROC", RegexOptions.IgnoreCase);	
	comment = regex.Split(commandText)[0];
	//remove comment characters
	regex = new Regex(@"(-{2,})|(/\*)|(\*/)");
	comment = regex.Replace(comment, string.Empty);
	//replace single single-quotes (') with double single-quotes('') to escape them 
	comment = comment.Replace("\'", "\'\'");
	//trim and return
	return comment.Trim();
}

/// <summary>
/// Get any in-line SQL comments on the same lines as parameters
/// </summary>
/// <param name="commandText">Command Text of the procedure</param>
/// <returns>Hashtable of parameter comments, with parameter names as keys</returns>
private Hashtable GetSqlParameterComments(string commandText)
{
	string parameters = "";
	// Extracte the parameter definition section from the command text (between CREATE PROC and AS)
	Regex regex = new Regex(@"
		CREATE\s+						#Create followed by whitespace
		PROC(EDURE)*.*			#either proc or procedure
		(?<params>(.|\n)*) 	#Capture the match in params
		^(\s*AS)						#everything up to a line that starts with AS (preceding whitespace ignored)",
		RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace | RegexOptions.Multiline);	
	parameters = regex.Match(commandText).Groups["params"].Value;
	Hashtable paramComments = new Hashtable();
	//loop through the matches and extract the parameter and the comment, ignoring duplicates
	regex = new Regex(@"
		(?<param>@\w*) 			#get each parameter (word starting with @)
		[^@]*								#ignore anything other than an @ sign
		--(?<comment>.*)		#until we get to the -- comment",
		RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace | RegexOptions.Multiline);	
	//foreach (Match match in Regex.Matches(parameters, @"(?<param>@\w*)[^@]*--(?<comment>.*)"))
	string comment = "";
	foreach (Match match in regex.Matches(parameters))
	{
		if (!paramComments.ContainsKey(match.Groups["param"].Value))
		{
			comment = match.Groups["comment"].Value.TrimEnd(new char[]{' ','\r','\n'});
			//replace single single-quotes (') with double single-quotes('') to escape them 
			comment = comment.Replace("\'", "\'\'");
			paramComments.Add(match.Groups["param"].Value, comment);
		}
	}
	//return the hashtable
	return paramComments;
}
</script>
