<%--
	Author: 
		Todd Carrico

    Update: Joe Johnston 
        Allow Azure and other cloud based servers DBs
	Description:
		DBSnaptshot will create a file for every database object 
		and if configured will attempt to script your database.
	Remarks:
		Only tested with Microsoft SQL Server 
        and Azure MS SQL 
        
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="TEXT" Src="SubTemplates/DbSnapshot.CodeBehind.cs" Inherits="_Main" Description="Scripts DatabaseObjects" Debug="True" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="1. Context" Description="Database that the documentation should be based on." %>
<%@ Property Name="ScriptTableData" Type="System.Boolean" Default="True" Category="2. Output" Description="If true and the Extended Property Named 'ScriptTableData' equals 'True', the data in the table will be scripted out" %>
<%@ Property Name="CleanDirectories" Type="System.Boolean" Default="False" Category="2. Output" Description="If true, the existing folders will be completely purged before scripting.  If false, the existing files will be overwritten as they are scripted.  Any extra files will remain." %>
<%@ Register Name="SprocsTemplate" Template="SubTemplates/ProcSchema.cst" %>
<%@ Register Name="TablesTemplate" Template="SubTemplates/TableSchema.cst" %>
<%@ Register Name="ViewsTemplate" Template="SubTemplates/ViewSchema.cst" %>
<%@ Register Name="TableDataTemplate" Template="SubTemplates/TableData.cst" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>

<script runat="template">
// Override the Render method and have it output the sub-templates to file.
public override void Render(TextWriter writer)
{
    string DATABASEPATH = "";
    string PROCSPATH = "";
    string TABLESPATH = "";
    string VIEWSPATH = "";
    string UDFPATH = "";
	string DATABASENAME =  CleanName(this.SourceDatabase.Name);
	
    System.Text.StringBuilder sqlCmd = new System.Text.StringBuilder();
	string cmd = "{0}\n";
    
	DateTime startTime = DateTime.Now;
	
    DATABASEPATH = System.IO.Path.Combine(this.OutputDirectory, this.ParseServerName( this.SourceDatabase ).ToString() + "." + DATABASENAME);
    PROCSPATH = System.IO.Path.Combine(DATABASEPATH, "Procs" );
    TABLESPATH = System.IO.Path.Combine(DATABASEPATH, "Tables" );
    VIEWSPATH = System.IO.Path.Combine(DATABASEPATH, "Views" );
    
    #region Directory Handling
	if (!Directory.Exists(this.OutputDirectory))
    {
	    // Create output directory.
	    Trace.WriteLine("Creating output directory...");
	    Directory.CreateDirectory(this.OutputDirectory);
	}
    else if (CleanDirectories)
    {
        if (!Directory.Exists(DATABASEPATH))
        {
            // Clean up the existing output directory.
            Trace.WriteLine("Cleaning up existing output directory...");
            this.DeleteSubFolders(DATABASEPATH);
            this.DeleteFiles(DATABASEPATH, "*.sql");
        }
    }
    
    if (!Directory.Exists(DATABASEPATH)) 
        Directory.CreateDirectory(DATABASEPATH);
    #endregion
	
	//Write out current configuration
	WriteCSP(DATABASEPATH);
    
    writer.WriteLine("Scripting Database Objects From " + this.SourceDatabase.Database.Name);
    writer.WriteLine(DATABASEPATH);
    
    this.Progress.MaximumValue = this.SourceDatabase.Tables.Count + this.SourceDatabase.Views.Count + (this.SourceDatabase.Commands.Count * 2);
    	
	#region Tables    
    if ( this.SourceDatabase.Tables.Count > 0 )
    {
        if (!Directory.Exists(TABLESPATH)) 
            Directory.CreateDirectory(TABLESPATH); 
        
        writer.WriteLine(TABLESPATH);
        
        writer.WriteLine("Scripting Tables"); Trace.WriteLine("Scripting Tables");
        TablesTemplate tablesTemplate = new TablesTemplate();
        TableDataTemplate dataTemplate = new TableDataTemplate();    
        string tableFolder = "";
    	//System.Diagnostics.Debugger.Break();
		
        foreach ( SchemaExplorer.TableSchema tbl in this.SourceDatabase.Tables )
        {   
            tablesTemplate = new TablesTemplate();
            string tableName = CleanName(tbl.Name);
            tableFolder = Path.Combine( TABLESPATH, tableName);
            if (!Directory.Exists( tableFolder ))
            {
                // Create output directory.
                Directory.CreateDirectory( tableFolder );
            }
            
            writer.Write("\t" + tbl.Name); Trace.Write("\t" + tbl.Name);
            
            // create Table
            tablesTemplate.ScriptDrop = true;
            tablesTemplate.ScriptConstraints = false;
            tablesTemplate.ScriptIndexes = false;
            tablesTemplate.ScriptCreate = true;
            tablesTemplate.SourceTable = tbl;
            tablesTemplate.RenderToFile(tableFolder + "\\" + tableName + ".sql", true);
            writer.Write(", Drop and Create"); Trace.Write(", Drop and Create");
            sqlCmd.AppendFormat(cmd, tableFolder + "\\" +  tableName + ".sql");
            // create constraints
            tablesTemplate.ScriptDrop = false;
            tablesTemplate.ScriptConstraints = true;
            tablesTemplate.ScriptIndexes = false;
            tablesTemplate.ScriptCreate = false;
            tablesTemplate.SourceTable = tbl;
            tablesTemplate.RenderToFile(tableFolder + "\\" +  tableName + "_constraints.sql", true);
            writer.Write(", Constraints"); Trace.Write(", Constraints");
            sqlCmd.AppendFormat(cmd, tableFolder + "\\" +  tableName + "_constraints.sql");
            // create indexes
            tablesTemplate.ScriptDrop = false;
            tablesTemplate.ScriptConstraints = false;
            tablesTemplate.ScriptIndexes = true;
            tablesTemplate.ScriptCreate = false;
            tablesTemplate.SourceTable = tbl;
            tablesTemplate.RenderToFile(tableFolder + "\\" +  tableName + "_indexes.sql", true);
            writer.Write(", Indexes"); Trace.Write(", Indexes");
            sqlCmd.AppendFormat(cmd, tableFolder + "\\" +  tableName + "_indexes.sql");
            // script data
            if (this.ScriptTableData) 
            {
				
                try
                {
                    dataTemplate = new TableDataTemplate();
                    dataTemplate.SourceTable = tbl;
                    dataTemplate.AutoExecuteScript = false;
                    dataTemplate.TextAsCData = true;
                    dataTemplate.RenderToFile(tableFolder + "\\" +  tableName + ".data.sql", true);
                    writer.Write(", Data"); Trace.Write(", Data");
                    sqlCmd.AppendFormat(cmd, tableFolder + "\\" +  tableName + ".data.sql");
                }
                catch ( Exception ex )
                {
                    writer.WriteLine("");
                    writer.WriteLine("********************************************************************************************");
                    writer.WriteLine("Failed to script the data out of " + tableName);
                    writer.WriteLine("Exception" + ex.ToString());
                    writer.WriteLine("********************************************************************************************");
                    writer.WriteLine("");
                    
                    Trace.WriteLine("");
                    Trace.WriteLine("********************************************************************************************");
                    Trace.WriteLine("Failed to script the data out of " + tableName);
                    Trace.WriteLine("********************************************************************************************");
                    Trace.WriteLine("");
                    
                }
            }
            writer.Write("...Complete"); Trace.Write("...Complete");
            writer.WriteLine(""); Trace.WriteLine("");
            
            this.Progress.Value++;
        }
        writer.WriteLine("Scripting Tables...done"); Trace.WriteLine("Scripting Tables...done");
		
    }
    #endregion
	
    #region Views
    if ( this.SourceDatabase.Views.Count > 0 )
    {
        if (!Directory.Exists(VIEWSPATH)) 
            Directory.CreateDirectory(VIEWSPATH); 
        
        writer.WriteLine(VIEWSPATH);        
        writer.WriteLine("Scripting Views"); Trace.WriteLine("Scripting Views");
        ViewsTemplate viewsTemplate = new ViewsTemplate();
        this.CopyPropertiesTo(viewsTemplate);
        foreach ( SchemaExplorer.ViewSchema view in this.SourceDatabase.Views )
        {
            viewsTemplate = new ViewsTemplate();
            
            writer.Write(view.Name); Trace.Write(view.Name);
            viewsTemplate.SourceView = view;
            viewsTemplate.RenderToFile(VIEWSPATH + "\\" + view.Name + ".sql", true);
            writer.Write("....Success"); Trace.Write("....Success");
            writer.WriteLine(""); Trace.WriteLine("");
            sqlCmd.AppendFormat(cmd, VIEWSPATH + "\\" + view.Name + ".sql");
            this.Progress.Value++;
        }    	
        writer.WriteLine("Scripting Views...done"); Trace.WriteLine("Scripting Views...done");
    }
	#endregion
    
	#region Sprocs
    if ( this.SourceDatabase.Commands.Count > 0 )
    {
        if (!Directory.Exists(PROCSPATH)) 
            Directory.CreateDirectory(PROCSPATH); 
        
        writer.WriteLine(PROCSPATH);
   
        writer.WriteLine("Scripting Stored Procs"); Trace.WriteLine("Scripting Stored Procs"); 
	    SprocsTemplate sprocsTemplate;
    
        foreach ( SchemaExplorer.CommandSchema proc in this.SourceDatabase.Commands )
        {   
            sprocsTemplate = new SprocsTemplate();
                    

            writer.Write("\t" + proc.Name); Trace.Write("\t" + proc.Name);
            // create Table
            sprocsTemplate.DBName = DATABASENAME;
            sprocsTemplate.ExistingProcedure = proc;
            sprocsTemplate.RenderToFile(PROCSPATH + "\\" + proc.Name + ".sql", true);
            writer.Write("....Success"); Trace.Write("....Success");
            writer.WriteLine(""); Trace.WriteLine("");
            sqlCmd.AppendFormat(cmd, PROCSPATH + "\\" + proc.Name + ".sql");
            
			this.Progress.Value++;
        }
        writer.WriteLine("Scripting Stored Procs...done"); Trace.WriteLine("Scripting Stored Procs...done"); 
    }
    #endregion
	
    this.Progress.Value = this.Progress.MaximumValue;

	writer.WriteLine("Generation complete. Execution time: " + (DateTime.Now - startTime).ToString());
    Trace.WriteLine("Generation complete. Execution time: " + (DateTime.Now - startTime).ToString()); 
	writer.WriteLine("To view the output go here: " + DATABASEPATH);
    Trace.WriteLine("To view the output go here: " + DATABASEPATH); 
    writer.WriteLine(sqlCmd.ToString());
    
    base.Render(writer);
}

public string ParseServerName( SchemaExplorer.DatabaseSchema db )
{
    string _serverName = "";
    string _scratch = "";
    
	System.Data.SqlClient.SqlConnection conn = 
		new System.Data.SqlClient.SqlConnection(db.Database.ConnectionString);
	
	_serverName = conn.DataSource;
	conn = null;
	if (    _serverName.Trim().StartsWith(".")
            || _serverName.Trim().StartsWith("(local)") 
			|| _serverName.Trim().StartsWith("127.0.0.1") 
        ) {          
            _serverName = CleanName(System.Windows.Forms.SystemInformation.ComputerName);
        } else if (
            // Allow a cloud source with port  TCP:xxx,1111 or a UDP:xxxx,1433 
            _serverName.Trim().Contains(":") /* eg tcp:myCloudData.database.windows.net,5588 */
        ) {
            const RegexOptions ro = RegexOptions.IgnoreCase; // | RegexOptions.IgnorePatternWhitespace | RegexOptions.Multiline | RegexOptions.Compiled ;
            String regexptrn = @"^.*\:(\w+)(\..*$)";
            String InPutString = _serverName.Trim();
            _serverName = Regex.Replace(InPutString, regexptrn, "$1", ro); 
        }
		
        if ( _serverName.Trim() == "") { _serverName = CleanName(System.Windows.Forms.SystemInformation.ComputerName); } // edge case 
        
	return _serverName;
}

public string CleanName( string item)
{
	return Regex.Replace(item, @"[\W]", "");
}

public void WriteCSP(string dbPath)
{
	if (!Directory.Exists(dbPath))
		Directory.CreateDirectory(dbPath);
		
	this.SavePropertiesToXmlFile(string.Format("{0}.csp", dbPath));
}
</script>
