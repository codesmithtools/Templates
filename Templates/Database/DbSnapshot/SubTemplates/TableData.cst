<%--
	Author: 
		Todd Carrico
	
	Description:
		DBSnaptshot will create a file for every database object 
		and if configured will attempt to script your database.
	Remarks:
		Only tested with Sql2000, Sql2005, SqlExpress
--%>
<%@ CodeTemplate Language="C#" Debug="True" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" TargetLanguage="T-SQL" 
    Description="Generates a script to replace data in a table." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Design" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import Namespace="System.Globalization" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="System.Xml" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context" 
    Description="Table to get the data from." %>
<%@ Property Name="TargetDatabase" Type="SchemaExplorer.DatabaseSchema" Category="2. Options" 
    Description="Database that the Script will be executed on.  Note the exiting table will be backed up." Optional="True" %>
<%@ Property Name="AutoExecuteScript" Type="System.Boolean" Default="False" Category="2. Options" 
    Description="Whether or not to immediately execute the script on the target database."  Optional="True" %>
<%@ Property Name="TextAsCData" Type="System.Boolean" Default="False" Category="2. Options" 
    Description="If True, Text is output in a CData tag, instead of being encoded."  Optional="False" %>
    
/*
 * SC Header, do not delete!
 *
 * $Revision:  $
 * $Date: <%= DateTime.Now.ToShortDateString() %> $
 * $Author: <%= Environment.UserName %> $
 * $Archive: $
 *
 * Purpose:
 *   To recreate the Data in <%= SourceTable.Name %> Table
 * Change History:
 *
 */

<% if ( null != this.TargetDatabase ) { %>
USE <%= TargetDatabase.Database.Name %>
<% } else { %>
USE <%= SourceTable.Database.Name %>
<% } %>
GO
BEGIN TRANSACTION
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
-- Backup the table
--#region
DECLARE 
    @TimeStamp VARCHAR(30),
    @SQL       NVARCHAR(4000),
    @Revision  NVARCHAR(20),
    @StatusMessage VARCHAR(400)
	
SET @Revision = CAST(REPLACE(REPLACE('$Revision: $', 'Revision:', ''), '$', '') AS INT)    
SET @TimeStamp = REPLACE(REPLACE(REPLACE(CONVERT(VARCHAR(25),GETDATE(),120),' ',''),'-',''),':','')   
SET @SQL = 'SELECT * INTO [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>_' + @Revision + '_' + @TimeStamp + '] FROM [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>]'
    
    EXEC sp_executesql @SQL

IF (@@ROWCOUNT = 0 AND (SELECT COUNT(*) FROM [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>]) > 0)
OR (@@ERROR > 0)
BEGIN
    RAISERROR('not enough rows inserted into the backup table', 16, 1)
    GOTO ErrorHandler
END
ELSE
BEGIN
    SET @StatusMessage = 'All existing data was copied into the table [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>_' + @Revision + '_' + @TimeStamp + ']'
    PRINT @StatusMessage
END
--#endregion

DELETE FROM [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>]
IF @@ERROR > 0
BEGIN
	PRINT 'Delete Failed, roll back the transaction'
    GOTO ErrorHandler
END
	
<% if (DoesTableHaveIdentityColumn()) { 
	// decimal seems to be the most compatible
	decimal seed = new decimal( Int32.MinValue  );
	if (!getTableIdentitySeed(out seed))
		throw new Exception("\"DBCC CHECKIDENT\" : There is a problem retrieving seed value for the identity column.");

	NumberFormatInfo nfi = new NumberFormatInfo();
	nfi.NumberDecimalDigits = 0;

%>
DBCC CHECKIDENT ('[<%= SourceTable.Owner %>].[<%= SourceTable.Name %>]', RESEED, <%= seed.ToString("N", nfi) %>)
IF @@ERROR > 0
BEGIN
	PRINT 'DBCC CHECKIDENT Failed, roll back the transaction'
    GOTO ErrorHandler
END

SET IDENTITY_INSERT [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] ON
<% } %>
-- Setup the XML document that is the table data, this text string can be up to 2gb in size.
--#region
DECLARE @DocumentHandle INT
EXEC dbo.sp_xml_preparedocument @DocumentHandle OUTPUT, N'
<%= this.GetRowDataAsXML() %>
'
--#endregion
INSERT INTO [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] (
	<% for (int x = 0; x < SourceTable.Columns.Count; x++) { %>
	[<%= SourceTable.Columns[x].Name %>]<% if (x < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
)
SELECT 
<% for (int x = 0; x < SourceTable.Columns.Count; x++) { %>
	[<%= SourceTable.Columns[x].Name %>]<% if (x < SourceTable.Columns.Count - 1) { %>,<% } %>
<% } %>
FROM OPENXML(@DocumentHandle, '<%= SourceTable.Name %>Rows/<%= SourceTable.Name %>Row', 2) WITH ( 
<% for (int x = 0; x < SourceTable.Columns.Count; x++) 
{ 
	Response.Write(string.Format("\t[{0}] {1}", SourceTable.Columns[x].Name, this.GetSQLDataType(SourceTable.Columns[x]))); 
	if (x < SourceTable.Columns.Count - 1) 
		Response.Write(",");
		
	Response.Write("\n");
} %> 
)
-- important to clean up the memory consumed by the XML Document
EXEC dbo.sp_xml_removedocument @DocumentHandle

<% if (DoesTableHaveIdentityColumn()) { %>
SET IDENTITY_INSERT [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] OFF
<% } %>

COMMIT TRANSACTION
ErrorHandler:
IF @@TRANCOUNT > 0
BEGIN
	ROLLBACK TRANSACTION
	PRINT 'Transaction for [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] Rolled Back'
END
GO

<script runat="template">

#region SourceTableData
private DataTable _sourceTableData;
private DataTable SourceTableData
{
	get
	{
		if (_sourceTableData == null)
		{
			_sourceTableData = SourceTable.GetTableData();
		}
		
		return _sourceTableData;
	}
}
#endregion

#region GetRowData
public string GetRowDataAsXML()
{
    TextWriter txWriter = new StringWriter();
    XmlTextWriter writer = new XmlTextWriter(txWriter);
      
    try
    {
        writer.Formatting = Formatting.Indented;
        writer.Indentation = 4;
        writer.IndentChar = ' ';
        writer.Namespaces = true;
        //Write the root element
        writer.WriteStartDocument();
        //writer.WriteStartElement("sql", string.Format("{0}Rows", this.SourceTable.Name), "urn:schemas-microsoft-com:xml-sql");
        writer.WriteStartElement(string.Format("{0}Rows", this.SourceTable.Name));
    
        for (int x = 0; x < SourceTableData.Rows.Count; x++) 
        {   
            DataRow row = SourceTableData.Rows[x];
            
            writer.WriteStartElement(string.Format("{0}Row", this.SourceTable.Name));
            
            //Write sub-elements	
            for (int i = 0; i < SourceTable.Columns.Count; i++)
            {
                ColumnSchema column = SourceTable.Columns[i];
            
                if (row[column.Name] != DBNull.Value)
                {			
                    if (IsNumericType(column))
                    {   
                        try
                        {                    
                            writer.WriteElementString(column.Name, ConvertBit(row[column.Name].ToString()));
                        }
                        catch( Exception e )
                        {
                            writer.WriteElementString(column.Name, row[column.Name].ToString());
                            this.Response.WriteLine("ERROR Writing data into the writer.");
                            this.Response.WriteLine(e.ToString());
                        }
                    }
                    else if (IsDateType(column))
                    {                    
                        try
                        {                    
                            writer.WriteElementString(column.Name, ((DateTime)(row[column.Name])).ToString("MM/dd/yyyy HH:mm:ss.fff") ); 
                        }
                        catch( Exception e )
                        {
                            writer.WriteElementString(column.Name, row[column.Name].ToString() ); 
                            this.Response.WriteLine("ERROR Writing Column::" + column.Name + " into the writer.");
                            this.Response.WriteLine(e.ToString());
                        }
                    }
                    /*
                    else if (IsBinary(column))
                    {
                        writer.WriteStartElement(column.Name); 
                        //writer.WriteBinHex((byte[])row[column.Name], 0, ((byte[])row[column.Name]).Length);
                        writer.WriteBase64((byte[])row[column.Name], 0, ((byte[])row[column.Name]).Length);                
                        writer.WriteEndElement();
                    }
                    */
                    else
                    {
                        if ( this.TextAsCData )
                        {
                            writer.WriteStartElement(column.Name);                     
                            writer.WriteCData(row[column.Name].ToString().Replace("'", "''"));
                            writer.WriteEndElement();                        
                        }
                        else
                        {
                            writer.WriteElementString(column.Name, row[column.Name].ToString().Replace("'", "''"));
                        }
                    }
                }
            }    
            writer.WriteEndElement();    
        }
        
        writer.WriteEndElement();
    }
    catch ( Exception outerE )
    {
        this.Response.WriteLine("ERROR Writing table data into the writer.");
        this.Response.WriteLine(outerE.ToString());
        throw outerE;
    }
    finally
    {
        writer.Flush();
        writer.Close();  
    }
    
	return txWriter.ToString();	
}
#endregion

#region DataType Tests

public bool IsDateType(ColumnSchema column)
{
	switch (column.NativeType.ToLower())
	{
		case "datetime":
		case "smalldatetime": return true;
		default: return false;
	}
}

public bool IsBinary(ColumnSchema column)
{
	switch (column.NativeType.ToLower())
	{
		case "binary":
        case "image":
		case "varbinary": return true;
		default: return false;
	}
}

public bool IsNumericType(ColumnSchema column)
{
	switch (column.NativeType.ToLower())
	{
		case "bigint":
		case "bit":
		case "decimal":
		case "float":
		case "int":
		case "money":
		case "numeric":
		case "real":
		case "smallint":
		case "smallmoney":
		case "tinyint": return true;
		default: return false;
	}
}

public string ConvertBit( string bitValue )
{
    if (bitValue.ToLower() == "false" )
    {
        return "0";
    } 
    else if (bitValue.ToLower() == "true" )
    {
        return "1";
    }
    else
    {
        return bitValue;
    }   
}
#endregion

#region GetSQLDataType
public string GetSQLDataType(ColumnSchema column)
{
	string param = column.NativeType.ToUpper();
	
	switch (column.DataType)
    {
        case DbType.Decimal:
        {
            param += "(" + column.Precision + ", " + column.Scale + ")";
            break;
        }
        case DbType.AnsiString:
        case DbType.AnsiStringFixedLength:
        case DbType.String:        
        case DbType.StringFixedLength:
        {
            if (column.NativeType != "text" && column.NativeType != "ntext")
            {
                if (column.Size > 0)
                {
                    param += "(" + column.Size + ")";
                }
            }
            break;
        }
        case DbType.Binary:
        {
            if ((column.Size > 0) && ( column.Size < 8001 ))
            {
                param += "(" + column.Size + ")";
            }
            break;
        }
    }
	
	return param;
}
#endregion

#region Identity Methods

#region DoesTableHaveIdentityColumn
public bool DoesTableHaveIdentityColumn()
{
    for (int i = 0; i < SourceTable.Columns.Count; i++) 
    {
	    if ( isIdentity( SourceTable.Columns[i] ) )
        {
            return true;
        }
	}
    return false;   
}
#endregion

#region isIdentity
private bool isIdentity(ColumnSchema column)
{
	return column.ExtendedProperties.Contains("CS_IsIdentity") && bool.Parse(column.ExtendedProperties["CS_IsIdentity"].Value.ToString());
}
#endregion

#region getTableIdentitySeed
/// <summary>
/// Retrieves seed value for identity column, if present in the SourceTable
/// </summary>
/// <param name="seed">seed value as output decimal</param>
/// <returns>true if identity column found and its seed value retrieved, false - otherwise</returns>
private bool getTableIdentitySeed(out decimal seed)
{
	bool is_found = false;
	seed = Convert.ToDecimal(Int32.MinValue);
	ColumnSchemaCollection tCols = new ColumnSchemaCollection(SourceTable.Columns);

	for(int i = 0; i < tCols.Count; i++)
	{
		if (isIdentity(tCols[i])) 
		{
			try
			{
				seed = Convert.ToDecimal(tCols[i].ExtendedProperties["CS_IdentitySeed"].Value);
			}
			catch (Exception e) // InvalidCastException, FormatException, NullValueArg
			{
				break;
			}
			
			is_found = true;
			break;
		}
	}
	return is_found;
} 
#endregion

#endregion

#region Lineup Text

/// <summary>
/// lines up a row of strings by breaking them into tokens
/// and lining up the tokens by the longest token of the same position
/// </summary>
/// <param name="Input">String to format</param>
/// <returns>Formated string</returns>
public string LineUp ( string Input)
{
    return LineUp ( Input, "", "[$Ignore$]" );
}

/// <summary>
/// lines up a row of strings by breaking them into tokens
/// and lining up the tokens by the longest token of the same position
/// </summary>
/// <param name="Input">string to format</param>
/// <returns>Formated string</returns>
/// <param name="Padding">additoinal padding used for froo froo formatting</param>
public string LineUp ( string Input, string Padding )
{
    return LineUp ( Input, Padding, "[$Ignore$]" );
}

/// <summary>
/// lines up a row of strings by breaking them into tokens
/// and lining up the tokens by the longest token of the same position
/// </summary>
/// <param name="Input">string to format</param>
/// <returns>Formated string</returns>
/// <param name="Padding">additoinal padding used for froo froo formatting</param>
/// <param name="IgnoreRowToken">if this string of characters is in the "row", the row is not formated Defaults to [$Ignore$]</param>
public string LineUp ( string Input, string Padding, string IgnoreRowToken )
{
    string[] rows;
    string indent = "";;
    int columnId = 0;
    int rowIndex = 0;
    int charIndex = 0;
    int maxColumnCount = 0;
    string indentTest = "";
    StringBuilder buffer = new StringBuilder();
    Regex regex = new Regex(@"(?(')('(?:[^']|'{2})*')|(?("")(""(?:[^""]|""{2})*"")|\S+))", RegexOptions.IgnoreCase | RegexOptions.Compiled   | RegexOptions.IgnorePatternWhitespace);

    #region Condition String

        if (null == Input || Input.Length == 0)
            return Input;

        Input = Input.Replace("\r\n", "\n");
    
        if ( null == IgnoreRowToken || IgnoreRowToken == "")
            IgnoreRowToken = "[$Ignore$]";

    #endregion

    #region Get String Statistics

        #region Get Max Column Count

            // Break the string into Rows by line break
            // then break each row into columns by space
            // then get the max column count
            rows = Input.Split('\n');
            for (rowIndex = 0 ; rowIndex < rows.Length ; rowIndex++)
            {
                if (rows[rowIndex].IndexOf(IgnoreRowToken) <= 0)
                {                           
                    maxColumnCount = maxColumnCount < rows[rowIndex].Split(' ').Length ? rows[rowIndex].Split(' ').Length : maxColumnCount;
                }
            }

        int[] ColumnWidths = new int[maxColumnCount];

        #endregion
    
        #region Get the indent of the first row so we can maintain it
        // possible regex?? "^(\s*)[^\S]"
            for (rowIndex = 0 ; rowIndex < rows.Length ; rowIndex++)
            {
                if ( rows[rowIndex].Length > 0 && rows[rowIndex].IndexOf(IgnoreRowToken) <= 0)
                {
                    indentTest = rows[rowIndex].Substring(0, 1);
                    if ( indentTest == " " || indentTest == "\t" )
                    {
                        for (charIndex = 0; charIndex < rows[rowIndex].Length; charIndex++)
                        {
                            indentTest = rows[rowIndex].Substring(charIndex, 1);
                            if ( indentTest != " " && indentTest != "\t" )
                                break;                    
                        }

                        indent = rows[rowIndex].Substring(0, charIndex);
                    }
                }
            }
        
        #endregion

        #region Get the max length of each column

            for (rowIndex = 0 ; rowIndex < rows.Length ; rowIndex++)
            {   
                if (rows[rowIndex].IndexOf(IgnoreRowToken) <= 0)
                {
                    columnId = 0;
                    foreach (Match _match in regex.Matches(rows[rowIndex].ToString()))
                    {   
                        if (regex.Matches(rows[rowIndex].ToString()).Count <= maxColumnCount)
                        {
                            ColumnWidths[columnId] = _match.Length > ColumnWidths[columnId] ? _match.Length : ColumnWidths[columnId];
                            columnId++;                                
                        }
                    }
                }
                //buffer.Append("\n");
            }
        //buffer.Append("\n\n");
        #endregion
    /*
    buffer.Append("ColumnWidths");
    for ( int i = 0; i < ColumnWidths.Length; i++)
    {
            buffer.Append(ColumnWidths[i].ToString() + ";");
    }

    buffer.Append("\n\n");
    */

    #endregion

    #region Build Output String

        for (rowIndex = 0 ; rowIndex < rows.Length ; rowIndex++)
        {                    
            buffer.Append(Padding + indent);    
    
            if (rows[rowIndex].IndexOf(IgnoreRowToken) > 0 || regex.Matches(rows[rowIndex].ToString()).Count > maxColumnCount)
            {
                buffer.Append(rows[rowIndex].ToString());
            }
            else
            {
                columnId = 0;
                foreach ( Match columns in regex.Matches(rows[rowIndex].ToString()))
                {                            
                    buffer.Append(columns.ToString().PadRight((ColumnWidths[columnId] + 1), ' '));
                    columnId++;                            
                }
            }

            if (rowIndex != rows.Length - 1)
                buffer.Append("\n");
        }
    
    #endregion

    buffer.Replace( IgnoreRowToken, "" );

    return buffer.ToString();
}
#endregion

#region Template Overrides
// Assign an appropriate file name to the output.
public override string GetFileName()
{
	if (this.SourceTable != null)
	{
		return this.SourceTable.Name + "_Data.sql";
	}
	else
	{
		return base.GetFileName();
	}
}

// Override the OutputFile property and assign our specific settings to it.
[Category("2. Options")]
[FileDialog(FileDialogType.Save, Title="Select Output File", Filter="Query Files (*.sql)|*.sql|All Files (*.*)|*.*", DefaultExtension=".sql")]
public override string OutputFile
{
	get {return base.OutputFile;}
	set {base.OutputFile = value;}
}

protected override void OnPostRender(string result) 
{
	if (this.AutoExecuteScript)
	{
		// execute the output on the same database as the source table.
		CodeSmith.BaseTemplates.ScriptResult scriptResult = CodeSmith.BaseTemplates.ScriptUtility.ExecuteScript(this.TargetDatabase.ConnectionString, result, new System.Data.SqlClient.SqlInfoMessageEventHandler(cn_InfoMessage)); 
		Trace.Write(scriptResult.ToString());
	}
	
	base.OnPostRender(result);
}

private void cn_InfoMessage(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs e)
{
	Trace.WriteLine(e.Message);
}
#endregion

</script>

