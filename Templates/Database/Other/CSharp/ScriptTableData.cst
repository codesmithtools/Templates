<%@ CodeTemplate Language="C#" Debug="True" TargetLanguage="T-SQL" Description="Generates a script based on the data from a table." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table to get the data from." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
/*
 * VSS Header, do not delete!
 *
 * $Revision: 1.1 $
 * $Date: 2003/10/05 22:16:53 $
 * $Author: Administrator $
 *
 */

USE <%= SourceTable.Database.Name %>
GO

/*
 * Purpose:
 *
 * Change History:
 *
 */

--VSS $Revision: 1.1 $
TRUNCATE TABLE <%= GetTableOwner() %>[<%= SourceTable.Name %>]

DBCC CHECKIDENT ('<%= GetTableOwner() %>[<%= SourceTable.Name %>]', RESEED, 1)

SET IDENTITY_INSERT <%= GetTableOwner() %>[<%= SourceTable.Name %>] ON

INSERT INTO <%= GetTableOwner() %>[<%= SourceTable.Name %>] (
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
)
	<% for (int i = 0; i < SourceTableData.Rows.Count; i++) { %>
	SELECT <%= GetTableRowValues(SourceTableData.Rows[i]) %><% if (i < SourceTableData.Rows.Count - 1) { %> UNION<% } %>
	<% } %>

SET IDENTITY_INSERT <%= GetTableOwner() %>[<%= SourceTable.Name %>] OFF
<script runat="template">
private DataTable _sourceTableData;

private DataTable SourceTableData
{
	get
	{
		if (_sourceTableData == null)
		{
			_sourceTableData = SourceTable.GetTableData();
		}
		
		return _sourceTableData;
	}
}

public string GetTableRowValues(DataRow row)
{
	StringBuilder rowBuilder = new StringBuilder();
	
	for (int i = 0; i < SourceTable.Columns.Count; i++)
	{
		ColumnSchema column = SourceTable.Columns[i];
		
		if (IsNumericType(column))
		{
			if (row[i] == DBNull.Value)
			{
				rowBuilder.Append("NULL, ");
			}
			else
			{
				rowBuilder.Append(row[i].ToString());
				rowBuilder.Append(", ");
			}
		}
		else
		{
			if (row[i] == DBNull.Value)
			{
				rowBuilder.Append("NULL, ");
			}
			else if (row[i] is DateTime)
			{
				rowBuilder.Append("'");
				rowBuilder.Append(((DateTime)row[i]).ToString("MM-dd-yyyy HH:mm:ss.fff"));
				rowBuilder.Append("'");
				rowBuilder.Append(", ");
			}
			else
			{
				rowBuilder.Append("'");
				rowBuilder.Append(PrepareValue(row[i].ToString()));
				rowBuilder.Append("'");
				rowBuilder.Append(", ");
			}
		}
	}
	
	return rowBuilder.ToString().Substring(0, rowBuilder.ToString().Length - 2);
}

public string PrepareValue(string value)
{
	return value.Replace("'", "''").Replace("\r\n", "' + CHAR(13) + CHAR(10) + '").Replace("\n", "' + CHAR(10) + '");
}

public bool IsNumericType(ColumnSchema column)
{
	switch (column.NativeType.ToLower())
	{
		case "bigint":
		case "bit":
		case "decimal":
		case "float":
		case "int":
		case "money":
		case "numeric":
		case "real":
		case "smallint":
		case "smallmoney":
		case "tinyint": return true;
		default: return false;
	}
}

public string GetTableOwner()
{
    return GetTableOwner(true);
}

public string GetTableOwner(bool includeDot)
{
    if (SourceTable.Owner.Length > 0)
    {
        return "[" + SourceTable.Owner + "].";
    }
    else
    {
        return "";
    }
}
</script>